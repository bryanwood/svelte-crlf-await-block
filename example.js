/* example.html generated by Svelte v1.49.3 */

function data(){
	return  { promise: new Promise(r => setTimeout(r, 100)) }
};

function create_main_fragment(state, component) {
	var div, await_block_1, await_block_type, await_token, promise, resolved;

	function replace_await_block(token, type, value, state) {
		if (token !== await_token) return;

		var old_block = await_block_1;
		await_block_1 = (await_block_type = type)(state, resolved = value, component);

		if (old_block) {
			old_block.u();
			old_block.d();
			await_block_1.c();
			await_block_1.m(div, null);
		}
	}

	function handle_promise(promise, state) {
		var token = await_token = {};

		if (isPromise(promise)) {
			promise.then(function(value) {
				replace_await_block(token, create_then_block, value, state);
			}, function (error_1) {
				replace_await_block(token, create_catch_block, error_1, state);
			});

			// if we previously had a then/catch block, destroy it
			if (await_block_type !== create_pending_block) {
				replace_await_block(token, create_pending_block, null, state);
				return true;
			}
		} else {
			resolved = promise;
			if (await_block_type !== create_then_block) {
				replace_await_block(token, create_then_block, resolved, state);
				return true;
			}
		}
	}

	handle_promise(promise = state.promise, state);

	return {
		c: function create() {
			div = createElement("div");

			await_block_1.c();
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);

			await_block_1.m(div, null);
		},

		p: function update(changed, state) {
			if (('promise' in changed) && promise !== (promise = state.promise) && handle_promise(promise, state)) {
				// nothing
			} else {
				await_block_1.p(changed, state, resolved);
			}
		},

		u: function unmount() {
			detachNode(div);

			await_block_1.u();
		},

		d: function destroy() {
			await_token = null;
			await_block_1.d();
		}
	};
}

// (2:19)  		<p>Waiting</p> 	{{then result}}
function create_pending_block(state, _, component) {
	var p;

	return {
		c: function create() {
			p = createElement("p");
			p.textContent = "Waiting";
		},

		m: function mount(target, anchor) {
			insertNode(p, target, anchor);
		},

		p: noop,

		u: function unmount() {
			detachNode(p);
		},

		d: noop
	};
}

// (4:1) {{then result}}
function create_then_block(state, result, component) {
	var p;

	return {
		c: function create() {
			p = createElement("p");
			p.textContent = "Result";
		},

		m: function mount(target, anchor) {
			insertNode(p, target, anchor);
		},

		p: noop,

		u: function unmount() {
			detachNode(p);
		},

		d: noop
	};
}

// (6:1) {{catch error}}
function create_catch_block(state, error, component) {
	var p, text, text_1_value = error, text_1;

	return {
		c: function create() {
			p = createElement("p");
			text = createText("Error ");
			text_1 = createText(text_1_value);
		},

		m: function mount(target, anchor) {
			insertNode(p, target, anchor);
			appendNode(text, p);
			appendNode(text_1, p);
		},

		p: function update(changed, state, error) {
			if ((changed.promise) && text_1_value !== (text_1_value = error)) {
				text_1.data = text_1_value;
			}
		},

		u: function unmount() {
			detachNode(p);
		},

		d: noop
	};
}

function example(options) {
	init(this, options);
	this._state = assign(data(), options.data);

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);
	}
}

assign(example.prototype, {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	observe: observe,
 	on: on,
 	set: set,
 	teardown: destroy,
 	_set: _set,
 	_mount: _mount,
 	_unmount: _unmount
 });

example.prototype._recompute = noop;

function isPromise(value) {
	return value && typeof value.then === 'function';
}

function createElement(name) {
	return document.createElement(name);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function noop() {}

function createText(data) {
	return document.createTextNode(data);
}

function appendNode(node, target) {
	target.appendChild(node);
}

function init(component, options) {
	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}
}

function _mount(target, anchor) {
	this._fragment.m(target, anchor);
}

function _unmount() {
	if (this._fragment) this._fragment.u();
}

function blankObject() {
	return Object.create(null);
}

function callAll(fns) {
	while (fns && fns.length) fns.pop()();
}

function differs(a, b) {
	return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}
export default example;